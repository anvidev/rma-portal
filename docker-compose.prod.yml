services:

  db:
    image: postgres:17.2
    container_name: rma-db
    restart: unless-stopped
    shm_size: 128mb
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    # ports:
    #   - 5432:5432
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    container_name: adminer
    restart: unless-stopped
    ports:
      - 8080:8080

  migrate:
      image: migrate/migrate
      container_name: migrate
      depends_on:
        db:
          condition: service_healthy
      volumes:
        - ./cmd/migrate/migrations:/migrations
      command:
        [ "-path", "/migrations", "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable", "up" ]

  api:
    build: .
    container_name: api
    restart: unless-stopped
    environment:
      SERVER_ENV: production
      POSTGRES_ADDR: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
      AUTH_TOKEN_HOST: ${AUTH_TOKEN_HOST}
      AUTH_TOKEN_SECRET: ${AUTH_TOKEN_SECRET}
      AUTH_TOKEN_EXPIRY: ${AUTH_TOKEN_EXPIRY}
    ports:
      - 9090:9090
    depends_on:
      db:
        condition: service_healthy

  web:
    build: ./web/
    container_name: web
    restart: unless-stopped
    environment:
      NODE_ENV: production
      ORIGIN: ${ORIGIN}
      API_URL: ${API_URL}
    ports:
      - 3000:3000

volumes:
  db-data:
